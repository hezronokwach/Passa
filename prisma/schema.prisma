generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id                   Int                @id @default(autoincrement())
  email                String             @unique
  password             String?
  name                 String?
  role                 Role               @default(FAN)
  emailVerified        DateTime?
  passwordResetExpires DateTime?
  passwordResetToken   String?            @unique
  verificationToken    String?            @unique
  walletAddress        String?            @unique
  artistInvitations    ArtistInvitation[]
  attributions         Attribution[]
  creatorProfile       CreatorProfile?
  eventsOrganized      Event[]
  notifications        Notification[]
  organizerProfile     OrganizerProfile?
  purchasedTickets     PurchasedTicket[]
  submissions          Submission[]
  scannedTickets       TicketScan[]         @relation("TicketScans")
  eventAttendances     EventAttendance[]    @relation("EventAttendees")
}

model CreatorProfile {
  id        Int             @id @default(autoincrement())
  userId    Int             @unique
  bio       String?
  skills    String[]
  website   String?
  user      User            @relation(fields: [userId], references: [id])
  portfolio PortfolioItem[]
}

model PortfolioItem {
  id               Int               @id @default(autoincrement())
  creatorProfileId Int
  title            String
  description      String?
  type             PortfolioItemType
  url              String
  createdAt        DateTime          @default(now())
  creatorProfile   CreatorProfile    @relation(fields: [creatorProfileId], references: [id])
}

model OrganizerProfile {
  id          Int     @id @default(autoincrement())
  userId      Int     @unique
  companyName String?
  bio         String?
  website     String?
  user        User    @relation(fields: [userId], references: [id])
}

model Event {
  id                Int                @id @default(autoincrement())
  title             String
  description       String            @db.Text
  date              DateTime
  location          String
  country           String
  imageUrl          String
  organizerId       Int
  artistSplit       Int                @default(70)
  venueSplit        Int                @default(20)
  passaSplit        Int                @default(10)
  createdAt         DateTime           @default(now())
  updatedAt         DateTime           @updatedAt
  published         Boolean            @default(false)
  totalBudget       Float?
  artistInvitations ArtistInvitation[]
  attributions      Attribution[]
  briefs            CreativeBrief[]
  organizer         User               @relation(fields: [organizerId], references: [id])
  purchasedTickets  PurchasedTicket[]
  tickets           Ticket[]
  attendances       EventAttendance[]
}

model Ticket {
  id               Int               @id @default(autoincrement())
  eventId          Int
  name             String
  price            Float
  quantity         Int
  sold             Int               @default(0)
  purchasedTickets PurchasedTicket[]
  event            Event             @relation(fields: [eventId], references: [id])
}

model PurchasedTicket {
  id          Int          @id @default(autoincrement())
  eventId     Int
  ticketId    Int
  ownerId     Int
  status      TicketStatus @default(ACTIVE)
  createdAt   DateTime     @default(now())
  event       Event        @relation(fields: [eventId], references: [id])
  owner       User         @relation(fields: [ownerId], references: [id])
  ticket      Ticket       @relation(fields: [ticketId], references: [id])
  transaction Transaction?
  scans       TicketScan[]
  attendance  EventAttendance[]
}

model Transaction {
  id                Int             @id @default(autoincrement())
  purchasedTicketId Int             @unique
  amount            Float
  currency          String
  blockchainTxId    String          @unique
  status            String
  createdAt         DateTime        @default(now())
  purchasedTicket   PurchasedTicket @relation(fields: [purchasedTicketId], references: [id])
}

model CreativeBrief {
  id             Int                @id @default(autoincrement())
  eventId        Int
  title          String
  description    String
  budget         Float
  requiredSkills String[]
  category       String
  createdAt      DateTime           @default(now())
  event          Event              @relation(fields: [eventId], references: [id])
  submissions    Submission[]
  invitations    ArtistInvitation[] @relation("BriefToInvitation")
}

model Submission {
  id          Int              @id @default(autoincrement())
  briefId     Int
  creatorId   Int
  message     String?
  fileUrl     String
  status      SubmissionStatus @default(PENDING)
  createdAt   DateTime         @default(now())
  attribution Attribution?
  brief       CreativeBrief    @relation(fields: [briefId], references: [id])
  creator     User             @relation(fields: [creatorId], references: [id])
}

model Attribution {
  id               Int              @id @default(autoincrement())
  eventId          Int
  userId           Int
  submissionId     Int?             @unique
  contributionType ContributionType
  sharePercentage  Float
  createdAt        DateTime         @default(now())
  event            Event            @relation(fields: [eventId], references: [id])
  submission       Submission?      @relation(fields: [submissionId], references: [id])
  user             User             @relation(fields: [userId], references: [id])
}

model NewsletterSubscription {
  id        Int      @id @default(autoincrement())
  email     String   @unique
  createdAt DateTime @default(now())
}

model ArtistInvitation {
  id             Int                   @id @default(autoincrement())
  eventId        Int
  organizerId    Int
  artistEmail    String
  artistName     String
  proposedFee    Float
  message        String?
  status         InvitationStatus      @default(PENDING)
  artistComments String?
  artistId       Int?
  sourceBriefId  Int?
  createdAt      DateTime              @default(now())
  updatedAt      DateTime              @updatedAt
  artist         User?                 @relation(fields: [artistId], references: [id])
  event          Event                 @relation(fields: [eventId], references: [id])
  sourceBrief    CreativeBrief?        @relation("BriefToInvitation", fields: [sourceBriefId], references: [id])
  history        InvitationHistory[]
}

model InvitationHistory {
  id           Int              @id @default(autoincrement())
  invitationId Int
  action       String           // CREATED, UPDATED, ACCEPTED, REJECTED
  oldStatus    InvitationStatus?
  newStatus    InvitationStatus?
  oldFee       Float?
  newFee       Float?
  comments     String?
  createdAt    DateTime         @default(now())
  invitation   ArtistInvitation @relation(fields: [invitationId], references: [id])
}

model Notification {
  id        Int      @id @default(autoincrement())
  userId    Int
  type      String
  title     String
  message   String
  data      Json?
  read      Boolean  @default(false)
  createdAt DateTime @default(now())
  user      User     @relation(fields: [userId], references: [id])
}

model QRToken {
  id        Int      @id @default(autoincrement())
  token     String   @unique
  ticketId  Int
  eventId   Int
  ownerId   Int
  expiresAt DateTime
  createdAt DateTime @default(now())

  @@index([expiresAt])
}

model TicketScan {
  id        Int      @id @default(autoincrement())
  ticketId  Int
  scannerId Int
  scannedAt DateTime @default(now())
  ticket    PurchasedTicket @relation(fields: [ticketId], references: [id])
  scanner   User     @relation("TicketScans", fields: [scannerId], references: [id])
}

model EventAttendance {
  id         Int      @id @default(autoincrement())
  eventId    Int
  userId     Int
  ticketId   Int      @unique
  checkedInAt DateTime @default(now())
  event      Event    @relation(fields: [eventId], references: [id], onDelete: Cascade)
  user       User     @relation("EventAttendees", fields: [userId], references: [id], onDelete: Cascade)
  ticket     PurchasedTicket @relation(fields: [ticketId], references: [id], onDelete: Cascade)
  
  @@index([eventId])
  @@index([userId])
}

enum Role {
  FAN
  CREATOR
  ORGANIZER
  ADMIN
}

enum PortfolioItemType {
  IMAGE
  VIDEO
}

enum SubmissionStatus {
  PENDING
  APPROVED
  REJECTED
}

enum TicketStatus {
  ACTIVE
  USED
}

enum ContributionType {
  CREATIVE
  SPONSORSHIP
}

enum InvitationStatus {
  PENDING
  ACCEPTED
  REJECTED
}
